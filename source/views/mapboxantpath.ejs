<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Ecolution - Travel Routes</title>
<meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
<link href="/css/mapbox-gl.css" rel="stylesheet">
<script type="text/javascript" src="/js/mapbox-gl.js"></script>
<!-- Forced CSS styles for rudimentary elements -->
<style>
body { margin: 0; padding: 0; }
#map { position: absolute; top: 0; bottom: 0; width: 100%; }
#confirmButton { display: none; position: absolute; bottom: 50px; left: 10px; }
#emissionData { display: none; position: absolute; bottom: 100px; left: 10px; }
#loadingIndicator { display: none; position: absolute; bottom: 110px; left: 150px; }
#successMessage { display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #fff; padding: 20px; border: 1px solid #ccc; border-radius: 5px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); }
#updatingIndicator { display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); padding: 20px; z-index: 1001;}

/* Navigation Bar Styles */
.nav-bar {
    position: fixed;
    top: 0;
    right: 0;
    padding: 20px;
    text-align: center;
    z-index: 1002; /* Ensuring it's above other elements */
    background-color: rgba(0, 0, 0, 0.5); /* Optional: Adding a semi-transparent background for visibility */
}

.nav-links {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    gap: 20px; /* Adjust the space between links as needed */
}

.nav-links a {
    text-decoration: none;
    color: white; /* Ensuring visibility */
    font-weight: bold;
}



</style>
</head>
<body>

    <input type="text" placeholder="Choose destination">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function() {
    const params = new URLSearchParams(window.location.search);
    const address = params.get('address');
    if (address) {
        // Select the input field based on the placeholder attribute
        var destinationInput = $('input[placeholder="Choose destination"]');
        destinationInput.val(decodeURIComponent(address));
        
        // Focus the input to prepare for synthetic event
        destinationInput.focus();
        
        // Create a synthetic keydown event
        var e = jQuery.Event("keydown", { keyCode: 65 }); // 65 is the key code for 'a'

        // Trigger the keydown event
        destinationInput.trigger(e);
        
        // If necessary, follow up with a keyup event
        var e2 = jQuery.Event("keyup", { keyCode: 65 }); // 'keyup' for the same key
        destinationInput.trigger(e2);
    }
});

    </script>

    <div class="nav-bar">
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/recycle">Recycle</a></li>
            <li><a href="/leaderboard">leaderboard</a></li>
        </ul>
    </div>




<script src="/js/mapbox-gl-directions.js"></script>
<!-- Reference to the ldrs library for a loading indicator -->
<script type="module" src="https://cdn.jsdelivr.net/npm/ldrs/dist/auto/infinity.js"></script>
<link rel="stylesheet" href="/css/mapbox-gl-directions.css" type="text/css">
<div id="map"></div>
<!-- Emission estimate bar -->
<div id="emissionData" class="mapbox-directions-confirm"><label for="emissionData">~Est: <span id="emissionValue">0.02 C02eMT</span></label></div>
<!-- eMT Loading Indicator -->
<l-infinity id="loadingIndicator"
  size="40"
  stroke="4"
  stroke-length="0.15"
  bg-opacity="0.3"
  speed="1.3"
  color= "#32c371"
></l-infinity>
<!-- Updating Indicator -->
<l-infinity id="updatingIndicator"
  size="30"
  stroke="4"
  stroke-length="0.15"
  bg-opacity="0.3"
  speed="1.3"
  color="#32c371"
></l-infinity>
<!-- Button to confirm the journey -->
<button id="confirmButton" class="mapbox-directions-confirm"><label for="confirmButton">Confirm Journey</label></button>
<div id="successMessage" class="mapbox-directions-success">
    <button id="okButton" class="mapbox-directions-success"><label for="okButton">Success! Journey has been saved!</label></button>
</div>
<!-- Makes any parsed data usable-->
<%-'<script>'%>
    const extendedEcoData = <%- JSON.stringify(extendedEcoData) %>;
<%-'</script>'%>

<script>
	mapboxgl.accessToken = 'pk.eyJ1IjoicHJpbWFscmV4IiwiYSI6ImNscmFrbWg2cjBjbDUyaW13dmxjeG96bXoifQ.ktWyvNqeJ4awZ2pu__T1Xw';
    const map = new mapboxgl.Map({
        container: 'map', // container ID
        // Dark mode mapbox style
        style: 'mapbox://styles/mapbox/dark-v11', // style URL
        center: [-0.12508,51.50466], // starting position [lng, lat]
        zoom: 15.773 // starting zoom
    });

    // Create the Directions API Box for the map
    const directionsControl = new MapboxDirections({
    accessToken: mapboxgl.accessToken
    });

    map.addControl(directionsControl, 'top-left');
    // Add a listener for when the Directions Box has updated information
    directionsControl.on('route', () => {
        console.log('Route updated');
        //console.log(directionsControl.getOrigin());
        //console.log(directionsControl.getDestination());
        showLoadingIndicator();
        // Parse the route data and send it to the server
        fetchRouteData();
    });

    

    const fetchRouteData = async () => {
        try {

            const origin = directionsControl.getOrigin().geometry.coordinates;
            const destination = directionsControl.getDestination().geometry.coordinates;
            const travelMode = directionsControl.getProfile().replace("mapbox/", "");
            const EVMode = directionsControl.getEVMode();

            // Send the route data to the server to get the pathing and information for the map
            const response = await fetch("/calculateRoute", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ origin, destination, travelMode, EVMode }),
            });

            if (!response.ok) {
                throw console.error("Error trying to calculateRoute:", error);
            }

            const data = await response.json();
            console.log(data.extendedEcoData);
                
            // Update the map with the new route data as needed
            refreshMap(data.extendedEcoData[0]);

            // Hide the loading indicator
            hideLoadingIndicator();
            // Show the new emission data for the journey
            document.getElementById('emissionValue').textContent = data.extendedEcoData[1] == 0 ? "No Emissions!" : data.extendedEcoData[1].toFixed(5) + " C02eMT";
            // Show the confirm button and emission data for the journey
            document.getElementById('confirmButton').style.display = 'block';
            document.getElementById('emissionData').style.display = 'block';

        } catch (error) {
            console.error("Error:", error);
        }
    };

    // When the confirm button is clicked, send the data to the server to update the user's carbon
    document.getElementById('confirmButton').addEventListener('click', async () => {

        // Hide the confirm button so users cannot send the data by mistake
        document.getElementById('confirmButton').style.display = 'none';
        // Show the updating indicator
        showUpdatingIndicator();

        // Create generic fetch request to prompt server to update the user's carbon
        const response = await fetch("/commitjourneycarbon", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
        });

        const data = await response.json();
        if (data.succesfullyUpdated == false) {
                throw console.error("Error trying to update user's carbon: ", error);
            }

        // Hide the updating indicator
        hideUpdatingIndicator();
    });

    document.getElementById('okButton').addEventListener('click', () => {
        document.getElementById('successMessage').style.display = 'none';
    });

    const addedLayerAndSourceIds = [];

    function refreshMap(newExtendedEcoData) {
        // Clear existing layers and sources
        addedLayerAndSourceIds.forEach((layerAndSourceId) => {
            if (map.getLayer(layerAndSourceId.layerIdBackground)) {
                map.removeLayer(layerAndSourceId.layerIdBackground);
                map.removeLayer(layerAndSourceId.layerIdDashed);
            }
            if (map.getSource(layerAndSourceId.sourceId)) {
                map.removeSource(layerAndSourceId.sourceId);
            }
        });

        // Clear the array after removing layers and sources
        addedLayerAndSourceIds.length = 0;

        // Add new layers and sources
        newExtendedEcoData.forEach((lineData, index) => {
            const sourceId = `line-${index}`;
            const layerIdBackground = `line-background-${index}`;
            const layerIdDashed = `line-dashed-${index}`;

            map.addSource(sourceId, {
                type: 'geojson',
                data: lineData,
            });

            map.addLayer({
                type: 'line',
                source: sourceId,
                id: layerIdBackground,
                paint: {
                    'line-color': index == 1 ? 'lime' : "red",
                    'line-width': 6,
                    'line-opacity': index == 1 ? 0.1 : 0.1
                }
            });

            map.addLayer({
                type: 'line',
                source: sourceId,
                id: layerIdDashed,
                paint: {
                    'line-color': index == 1 ? 'lime' : "red",
                    'line-width': 6,
                    'line-dasharray': [0, 4, 3]
                }
            });

            const dashArraySequence = [
                [0, 4, 3],
                [0.5, 4, 2.5],
                [1, 4, 2],
                [1.5, 4, 1.5],
                [2, 4, 1],
                [2.5, 4, 0.5],
                [3, 4, 0],
                [0, 0.5, 3, 3.5],
                [0, 1, 3, 3],
                [0, 1.5, 3, 2.5],
                [0, 2, 3, 2],
                [0, 2.5, 3, 1.5],
                [0, 3, 3, 1],
                [0, 3.5, 3, 0.5]
            ];

            let step = 0;

            function animateDashArray(timestamp) {
                const newStep = parseInt((timestamp / 50) % dashArraySequence.length);

                if (newStep !== step) {
                    // Use the unique layer ID for each line
                    map.setPaintProperty(
                        layerIdDashed,
                        'line-dasharray',
                        dashArraySequence[step]
                    );
                    step = newStep;
                }

                requestAnimationFrame(animateDashArray);
            }

            animateDashArray(0);

            addedLayerAndSourceIds.push({
                layerIdBackground,
                layerIdDashed,
                sourceId
            });

        });
    }

    map.on('load', () => {
        // Assume ExtendedEcoData is the updated data you receive from the server
        refreshMap(extendedEcoData);
    });

    // Show loading indicator
    function showLoadingIndicator() {
        document.getElementById('emissionValue').textContent = "";
        document.getElementById('loadingIndicator').style.display = 'block';
    }

    // Hide loading indicator 
        function hideLoadingIndicator() {
        document.getElementById('loadingIndicator').style.display = 'none';
    }

    // "" updating indicator
    function showUpdatingIndicator() {
        document.getElementById('okButton').style.display = 'none';
        document.getElementById('successMessage').style.display = 'block';
        document.getElementById('updatingIndicator').style.display = 'block';
    }

    // "" updating indicator
    function hideUpdatingIndicator() {
        document.getElementById('updatingIndicator').style.display = 'none';
        document.getElementById('okButton').style.display = 'block';
    }

</script>

</body>
</html>